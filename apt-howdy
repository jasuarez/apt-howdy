#!/bin/sh
#
# apt-howdy -- Check for new available packages
#
# Copyright (C) 2010 Igalia, S.L.
# Authors: Juan A. Suarez Romero <jasuarez@igalia.com>
#
# apt-howdy is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# apt-howdy is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with apt-howdy. If not, see <http://www.gnu.org/licenses/>.
#

set -e

BASEDIR=/home/user/.apt-howdy		# Place where to put RSS page
RSSFILE=${BASEDIR}/new-packages.xml	# RSS page to use

CACHEDIR=${BASEDIR}/cache		# Place to put internal files
RSSHEADER=${CACHEDIR}/rss-header	# Header of RSS page
FEEDS=${CACHEDIR}/package-feeds		# Feeds for new packages
OLDLIST=${CACHEDIR}/package-old-list	# List with last-time checked files
NEWLIST=${CACHEDIR}/package-new-list	# List with packages after updating
NEWPACKAGES=${CACHEDIR}/package-news	# List with new packages available

# Formats package description ($1) as escaped HTML
text_to_html ()
{
	SHORT="s/^Description: \([^ ].*\)$/<p><b>\1<\/b><\/p><p>/"
	PAR="s/^ \.$/<\/p><p>/"
	BREAK="s/^ /<br>/"
	LEAD="s/^ //"

	QUOT="s/\"/\&quot;/g"
	AMP="s/&/\&amp;/g"
	LT="s/</\&lt;/g"
	GT="s/>/\&gt;/g"
	CIRC="s/\^/\&circ;/g"
	TILDE="s/~/\&tilde;/g"
	EURO="s/â‚¬/\&euro;/g"

	echo -n "$1</p>" | sed -e "${SHORT};${PAR};${LEAD};${BREAK};${QUOT};${AMP};${LT};${GT};${CIRC};${TILDE};${EURO}"
}

# Creates header of RSS page
create_rss_header ()
{
	printf "<title>%s</title>\n<link>%s</link>\n<description>%s</description>\n"	\
		"New available packages"						\
		"http://gitorious.org/apt-howdy"					\
		"The list of new available packages after update" > ${RSSHEADER}
}

# Creates all required files
initialize ()
{
        if [ ! -d ${BASEDIR} ]; then
                mkdir -p ${BASEDIR}
        fi

        if [ ! -d ${CACHEDIR} ]; then
                mkdir -p ${CACHEDIR}
        fi

	if [ ! -f ${OLDLIST} ]; then
		apt-cache pkgnames | sort > ${OLDLIST}
	fi

	if [ ! -f ${RSSHEADER} ]; then
		create_rss_header
	fi

	if [ ! -f ${FEEDS} ]; then
		touch ${FEEDS};
	fi

	if [ ! -f ${RSSFILE} ]; then
		create_rss
	fi
}

# Get a list of available packages in repositories
get_available_packages ()
{
	apt-cache pkgnames | sort > ${NEWLIST}
}

# Get a list of new packages available in repositories that were not available
# before
compute_new_packages ()
{
	awk 'FNR==NR{tab[$0]++} FNR!=NR && !tab[$0]' ${OLDLIST} ${NEWLIST} > ${NEWPACKAGES}
}

# Save the list of new packages, so they will not be notified any more in
# future
save_new_packages ()
{
	cat ${OLDLIST} ${NEWPACKAGES} > ${OLDLIST}.tosort
        cat ${OLDLIST}.tosort | sort > ${OLDLIST}
}

# Cleans up any unneeded file
finalize ()
{
	rm ${NEWPACKAGES}
	rm ${NEWLIST}
	rm ${OLDLIST}.tosort
}

# Given a package ($1) it creates a feed to notify its availability
package_to_feed ()
{
	if [ -z $1 ]; then
		return;
	fi

	TITLE=$(apt-cache --no-all-versions show $1 | grep ^Maemo-Display-Name | cut -c21-)
	if [ -z "${TITLE}" ]; then
		TITLE=$(apt-cache --no-all-versions show $1 | grep ^Package | cut -c10-)
	fi
	DESC=$(apt-cache --no-all-versions show $1 | awk  -F"$" '/^Description/ { print $1 ; i=1 ; next } /^ / && i==1 { print $1 ; next } { i=0 }')
	ICON=$(apt-cache --no-all-versions show $1 | awk  -F"$" '/^Maemo-Icon-26/ { i=1 ; next } /^ / && i==1 { print $1 ; next } { i=0 }')
	if [ "${ICON}" ]; then
		ICON_HTML="&lt;img src=&quot;data:image/png;base64,${ICON}&quot; align=&quot;right&quot; style=&quot;float: right&quot; /&gt;"
	else
		ICON_HTML=""
	fi
	DESC_HTML=$(text_to_html "$DESC")
	CAT=$(apt-cache --no-all-versions show $1 | grep ^Section | cut -f2 -d"/")
	echo "<item><title>${TITLE}</title><category>${CAT}</category><description>${ICON_HTML} ${DESC_HTML}</description><pubDate>$(date)</pubDate></item>\n" >> ${FEEDS}
}

# Creates (or re-creates) the RSS page
create_rss ()
{
	printf "<?xml version=\"1.0\"?>\n<rss version=\"2.0\">\n<channel>\n" > ${RSSFILE}
	cat ${RSSHEADER} >> ${RSSFILE}
	cat ${FEEDS} >> ${RSSFILE}
	printf  "</channel>\n</rss>\n" >> ${RSSFILE}
}

# Checks if the package ($1) must be filtered. Only packages that belongs to
# "user/*" category, except for "user/hidden", and do not have flag
# "system-update" on will be notified
filter ()
{
	apt-cache --no-all-versions show $1 | awk -F"(: |/)" '$1=="Section" && ($2!="user" || $3=="system") { print 1 ; nextfile } $1=="Maemo-Flags" && /system-update/ { print 1 ; nextfile }'
}

# Main program
[ "x$1" = "x-v" ] && echo "Initializing..."
initialize

[ "x$1" = "x-v" ] && echo "Getting a list of available packages..."
get_available_packages

[ "x$1" = "x-v" ] && echo "Obtaining a list of new packages..."
compute_new_packages

# No new packages
if [ ! -s ${NEWPACKAGES} ]; then
	[ "x$1" = "x-v" ] && echo "There are no new packages"
	[ "x$1" = "x-v" ] && echo "Finalizing..."
	finalize
	return 0
fi

while read PACKAGE ; do
	if [ ! $(filter ${PACKAGE}) ]; then
		[ "x$1" = "x-v" ] && echo "Generating feed for ${PACKAGE}..."
		package_to_feed ${PACKAGE}
	else
		[ "x$1" = "x-v" ] && echo "Package ${PACKAGE} will not be notified"
	fi
done < ${NEWPACKAGES}

[ "x$1" = "x-v" ] && echo "Saving list of new packages..."
save_new_packages

[ "x$1" = "x-v" ] && echo "Generating the final RSS page..."
create_rss

[ "x$1" = "x-v" ] && echo "Finalizing..."
finalize

